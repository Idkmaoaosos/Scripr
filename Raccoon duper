local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rin",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rin's hub",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera

local connections = {}

-- Add white highlight + name label
local function applyVisuals(character, player)
	if not character:FindFirstChild("WhiteHighlight") then
		local highlight = Instance.new("Highlight")
		highlight.Name = "WhiteHighlight"
		highlight.FillColor = Color3.new(1, 1, 1)
		highlight.FillTransparency = 0.25
		highlight.OutlineColor = Color3.new(1, 1, 1)
		highlight.OutlineTransparency = 0.25
		highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
		highlight.Parent = character
	end

	if not character:FindFirstChild("NameDisplay") then
		local billboard = Instance.new("BillboardGui")
		billboard.Name = "NameDisplay"
		billboard.Size = UDim2.new(0, 100, 0, 25)
		billboard.StudsOffset = Vector3.new(0, 3, 0)
		billboard.AlwaysOnTop = true
		billboard.Adornee = character:FindFirstChild("Head") or character:FindFirstChildWhichIsA("BasePart")
		billboard.Parent = character

		local textLabel = Instance.new("TextLabel")
		textLabel.Size = UDim2.new(1, 0, 1, 0)
		textLabel.BackgroundTransparency = 1
		textLabel.Text = player.Name
		textLabel.TextColor3 = Color3.new(1, 1, 1)
		textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
		textLabel.TextStrokeTransparency = 0
		textLabel.TextScaled = false
		textLabel.TextSize = 14
		textLabel.Font = Enum.Font.SourceSans
		textLabel.Parent = billboard
	end
end

-- Remove visuals
local function removeVisuals(character)
	local h = character:FindFirstChild("WhiteHighlight")
	if h then h:Destroy() end

	local label = character:FindFirstChild("NameDisplay")
	if label then label:Destroy() end
end

local function setHighlightEnabled(enabled)
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			if player.Character then
				if enabled then
					applyVisuals(player.Character, player)
				else
					removeVisuals(player.Character)
				end
			end

			if enabled then
				connections[player] = player.CharacterAdded:Connect(function(char)
					applyVisuals(char, player)
				end)
			else
				if connections[player] then
					connections[player]:Disconnect()
					connections[player] = nil
				end
			end
		end
	end

	if enabled and not connections["_playerAdded"] then
		connections["_playerAdded"] = Players.PlayerAdded:Connect(function(player)
			if player ~= LocalPlayer then
				connections[player] = player.CharacterAdded:Connect(function(char)
					applyVisuals(char, player)
				end)
			end
		end)
	elseif not enabled and connections["_playerAdded"] then
		connections["_playerAdded"]:Disconnect()
		connections["_playerAdded"] = nil
	end
end

local Tab = Window:CreateTab("Universal", 4483362458)

-- Highlight Toggle
local Toggle = Tab:CreateToggle({
   Name = "White Highlight + Username",
   CurrentValue = false,
   Flag = "HighlightToggle",
   Callback = function(Value)
      setHighlightEnabled(Value)
   end,
})

-- Tracer Toggle
local tracerConnection = nil
local tracerLines = {}

local function clearTracers()
	for _, line in ipairs(tracerLines) do
		if line then
			line:Remove()
		end
	end
	table.clear(tracerLines)
end

local Toggle = Tab:CreateToggle({
   Name = "Tracers",
   CurrentValue = false,
   Flag = "TracerToggle",
   Callback = function(Value)
      clearTracers()
      if Value then
         tracerConnection = RunService.RenderStepped:Connect(function()
            clearTracers()
            for _, player in ipairs(Players:GetPlayers()) do
               if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                  local head = player.Character.Head
                  local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                  if onScreen then
                     local line = Drawing.new("Line")
                     line.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y) -- bottom-center
                     line.To = Vector2.new(screenPos.X, screenPos.Y)
                     line.Color = Color3.new(1, 1, 1)
                     line.Thickness = 1.5
                     line.Transparency = 0.75
                     line.ZIndex = 1
                     line.Visible = true
                     table.insert(tracerLines, line)
                  end
               end
            end
         end)
      else
         if tracerConnection then
            tracerConnection:Disconnect()
            tracerConnection = nil
         end
         clearTracers()
      end
   end,
})
