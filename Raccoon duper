local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rin",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Rin",
   ShowText = "Rin's hub",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "https://discord.gg/CuD77Ag6En",
      RememberJoins = true
   },
   KeySystem = true,
   KeySettings = {
      Title = "rin hub key",
      Subtitle = "Key System",
      Note = "get key from discord https://discord.gg/CuD77Ag6En",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"RINVW"}
   }
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local connections = {}
local Tab = Window:CreateTab("Universal", 4483362458)

-- == White Highlight + Name Tag ==
local function applyVisuals(character, player)
   if not character:FindFirstChild("WhiteHighlight") then
      local highlight = Instance.new("Highlight")
      highlight.Name = "WhiteHighlight"
      highlight.FillColor = Color3.new(1, 1, 1)
      highlight.FillTransparency = 0.25
      highlight.OutlineColor = Color3.new(1, 1, 1)
      highlight.OutlineTransparency = 0.25
      highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
      highlight.Parent = character
   end

   if not character:FindFirstChild("NameDisplay") then
      local billboard = Instance.new("BillboardGui")
      billboard.Name = "NameDisplay"
      billboard.Size = UDim2.new(0, 200, 0, 25)
      billboard.StudsOffset = Vector3.new(0, 3, 0)
      billboard.AlwaysOnTop = true
      billboard.Adornee = character:FindFirstChild("Head") or character:FindFirstChildWhichIsA("BasePart")
      billboard.Parent = character

      local textLabel = Instance.new("TextLabel")
      textLabel.Size = UDim2.new(1, 0, 1, 0)
      textLabel.BackgroundTransparency = 1
      textLabel.Text = player.Name
      textLabel.TextColor3 = Color3.new(1, 1, 1)
      textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
      textLabel.TextStrokeTransparency = 0
      textLabel.TextScaled = true
      textLabel.Font = Enum.Font.SourceSans
      textLabel.Parent = billboard
   end
end

local function removeVisuals(character)
   local h = character:FindFirstChild("WhiteHighlight")
   if h then h:Destroy() end

   local label = character:FindFirstChild("NameDisplay")
   if label then label:Destroy() end
end

local function setHighlightEnabled(enabled)
   for _, player in ipairs(Players:GetPlayers()) do
      if player ~= LocalPlayer then
         if player.Character then
            if enabled then
               applyVisuals(player.Character, player)
            else
               removeVisuals(player.Character)
            end
         end

         if enabled then
            connections[player] = player.CharacterAdded:Connect(function(char)
               applyVisuals(char, player)
            end)
         else
            if connections[player] then
               connections[player]:Disconnect()
               connections[player] = nil
            end
         end
      end
   end

   if enabled and not connections["_playerAdded"] then
      connections["_playerAdded"] = Players.PlayerAdded:Connect(function(player)
         if player ~= LocalPlayer then
            connections[player] = player.CharacterAdded:Connect(function(char)
               applyVisuals(char, player)
            end)
         end
      end)
   elseif not enabled and connections["_playerAdded"] then
      connections["_playerAdded"]:Disconnect()
      connections["_playerAdded"] = nil
   end
end

Tab:CreateToggle({
   Name = "White Highlight + Username",
   CurrentValue = false,
   Flag = "HighlightToggle",
   Callback = function(Value)
      setHighlightEnabled(Value)
   end,
})

-- Combined Box ESP and Tracer ESP system
local boxESPEnabled = false
local tracerESPEnabled = false
local espConnection = nil
local espDrawings = {}

local function clearESP()
   for _, obj in ipairs(espDrawings) do
      if obj then obj:Remove() end
   end
   table.clear(espDrawings)
end

local function updateESP()
   clearESP()

   for _, player in ipairs(Players:GetPlayers()) do
      if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
         local hrp = player.Character.HumanoidRootPart
         local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)

         if onScreen then
            if boxESPEnabled then
               local size = Vector3.new(4, 6, 0)
               local corners = {
                  Vector3.new(-size.X/2, size.Y/2, 0),
                  Vector3.new(size.X/2, size.Y/2, 0),
                  Vector3.new(size.X/2, -size.Y/2, 0),
                  Vector3.new(-size.X/2, -size.Y/2, 0)
               }

               local screenCorners = {}
               for _, corner in ipairs(corners) do
                  local world = hrp.CFrame:PointToWorldSpace(corner)
                  local screenCorner, _ = camera:WorldToViewportPoint(world)
                  table.insert(screenCorners, screenCorner)
               end

               for i = 1, #screenCorners do
                  local nextIndex = (i % #screenCorners) + 1
                  local line = Drawing.new("Line")
                  line.From = Vector2.new(screenCorners[i].X, screenCorners[i].Y)
                  line.To = Vector2.new(screenCorners[nextIndex].X, screenCorners[nextIndex].Y)
                  line.Color = Color3.new(1, 1, 1)
                  line.Thickness = 1.5
                  line.Transparency = 0.75
                  line.Visible = true
                  table.insert(espDrawings, line)
               end
            end

            if tracerESPEnabled then
               local line = Drawing.new("Line")
               line.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
               line.To = Vector2.new(screenPos.X, screenPos.Y)
               line.Color = Color3.new(1, 1, 1)
               line.Thickness = 1.5
               line.Transparency = 0.75
               line.Visible = true
               table.insert(espDrawings, line)
            end
         end
      end
   end
end

local function handleESPLoop()
   if not espConnection then
      espConnection = RunService.RenderStepped:Connect(function()
         updateESP()
      end)
   end
   if not boxESPEnabled and not tracerESPEnabled then
      if espConnection then
         espConnection:Disconnect()
         espConnection = nil
         clearESP()
      end
   end
end

Tab:CreateToggle({
   Name = "Box ESP",
   CurrentValue = false,
   Flag = "BoxESP",
   Callback = function(Value)
      boxESPEnabled = Value
      handleESPLoop()
   end,
})

Tab:CreateToggle({
   Name = "Tracer ESP",
   CurrentValue = false,
   Flag = "TracerESP",
   Callback = function(Value)
      tracerESPEnabled = Value
      handleESPLoop()
   end,
})

-- Auto Clicker Toggle
local autoClickerEnabled = false
local autoClickerConnection

local AutoClickerToggle = Tab:CreateToggle({
   Name = "Auto Clicker",
   CurrentValue = false,
   Flag = "AutoClicker",
   Callback = function(Value)
      autoClickerEnabled = Value
      if autoClickerEnabled then
         autoClickerConnection = RunService.Heartbeat:Connect(function()
            mouse1press()
            task.wait(0.01)
            mouse1release()
         end)
      else
         if autoClickerConnection then
            autoClickerConnection:Disconnect()
            autoClickerConnection = nil
         end
      end
   end,
})
